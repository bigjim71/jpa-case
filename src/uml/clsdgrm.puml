@startuml




class EnrollmentService{
  registerStudent(String username, String password, String creditCardNumber, LocalDate expDate, String initialEmail) : long
  registerStudentForEvent(long studentId, long eventId)
  addNewCourseTitle(String code, Days days, String title)
  scheduleCourses(long courseTitleId, LocalDate... dates)
}
note top of EnrollmentService:Improve overall robustness (especially null values)

EnrollmentService ..> Student

class StudentRepository{
  void insert(Object o)
  Option<Student> getStudent(long studentId)
  Option<Course> getCourse(long eventId)
  Option<CourseTitle> getCourseTitle(long courseTitleId)
  -<T> Option<T> get(Class<T> clazz, long id)
}

EnrollmentService -> StudentRepository

note right of Student : registering for course costs 1 token per course day .\nEvery student gets 10 tokens.\nCan only register when sufficient tokens are available.\nCan not register when credit card expires in less than a month\nyou can only register for courses starting in more than two days\nYou can only register for courses with less than 10 students on it

class Student {
  Long id
  String username
  String password
  Set<String> emailAddresses
  int tokens
  registerForEvent(Course event)
  Long getStudent()
  Student(String username, String password, String initialEmailAddress)
  useCard(String creditCardNumber, LocalDate expDate)
  equals() : boolean
  hashcode() :int
}

class CreditCard{
  String cardNumber;
  Date expDate;
  CreditCard(String cardNumber, LocalDate expDate)
  equals() : boolean
  hashcode() :int
}

Student *-- CreditCard

Class Course{
   Long id
   Date startDate
   int getPriceInTokens()
   ~Course(LocalDate date, CourseTitle courseTitle)
   ~_registerStudent(Student student)
   equals() : boolean
   hashcode() :int
}


class CourseTitle{
  Long id
  String title
  String courseCode
  int durationInDays
  scheduleCourses(LocalDate.... startDates)
  CourseTitle(String courseCode, Days days, String title)
  Days getDuration()
  schedule(LocalDate... dates)
  equals() : boolean
  hashcode() :int

}


Student "0..10" -- "*" Course
Course "*" -- "1" CourseTitle

@enduml
